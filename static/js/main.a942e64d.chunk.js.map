{"version":3,"sources":["firebase.js","components/TimesList.js","components/AddTimeEntry.js","App.js","serviceWorker.js","index.js"],"names":["firebaseConfig","apiKey","process","REACT_APP_API_KEY","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firebase","initializeApp","SORT_OPTIONS","column","direction","TimesList","useState","times","setTimes","sortBy","setSortBy","useEffect","unsubscribe","firestore","collection","orderBy","onSnapshot","snapshot","newTimes","docs","map","doc","id","data","value","onChange","e","currentTarget","disabled","time","key","className","title","time_seconds","onClick","delete","then","console","log","catch","error","AddTimeEntry","setTitle","setTime","onSubmit","preventDefault","add","parseInt","autoFocus","type","target","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"uQAKIA,G,MAAiB,CACjBC,OAAQC,4IAAYC,kBACpBC,WAAY,sCACZC,YAAa,6CACbC,UAAW,sBACXC,cAAe,kCACfC,kBAAmB,gBACnBC,MAAO,6CACPC,cAAe,iBAGnBC,IAASC,cAAcZ,GAGRW,QAAf,E,uBCfME,EAAe,CACjB,SAAY,CAAEC,OAAQ,eAAgBC,UAAW,OACjD,UAAa,CAAED,OAAQ,eAAgBC,UAAW,QAElD,UAAa,CAAED,OAAQ,QAASC,UAAW,OAC3C,WAAc,CAAED,OAAQ,QAASC,UAAW,SA4EjCC,EAtEG,WAAO,IAAD,EACMC,mBAAS,IADf,mBACbC,EADa,KACNC,EADM,OAEQF,mBAAS,YAFjB,mBAEbG,EAFa,KAELC,EAFK,KAoCpB,OA/BAC,qBAAU,WACN,IAAMC,EACFZ,EACKa,YACAC,WAAW,SACXC,QAAQb,EAAaO,GAAQN,OAAQD,EAAaO,GAAQL,WAC1DY,YAAW,SAACC,GACT,IAAMC,EAAWD,EAASE,KAAKC,KAAI,SAACC,GAAD,oBAE3BC,GAAID,EAAIC,IACLD,EAAIE,WAIff,EAASU,MAGrB,OAAO,kBAAMN,OACd,CAACH,IAeA,6BACI,0CACA,6BACI,0CADJ,IAC4B,GACxB,4BAAQe,MAAOf,EAAQgB,SAAU,SAAAC,GAAC,OAAIhB,EAAUgB,EAAEC,cAAcH,SAC5D,4BAAQA,MAAM,YAAd,sBACA,4BAAQA,MAAM,aAAd,sBACA,4BAAQI,UAAQ,GAAhB,MACA,4BAAQJ,MAAM,aAAd,aACA,4BAAQA,MAAM,cAAd,eAGR,4BAEQjB,EAAMa,KAAI,SAACS,GAAD,OACN,wBAAIC,IAAKD,EAAKP,IACV,yBAAKS,UAAU,cACVF,EAAKG,MACN,0BAAMD,UAAU,QAAQF,EAAKI,aAA7B,YACA,4BAAQC,QAAS,kBA9BvBZ,EA8B0CO,EAAKP,QA7BjEtB,EACKa,YAAYC,WAAW,SAASO,IAAIC,GAAIa,SACxCC,MAAK,kBAAMC,QAAQC,IAAI,sBACvBC,OAAM,SAACC,GACJH,QAAQC,IAAI,0BAA2BE,MALnD,IAAsBlB,IA8BM,kBC/BjBmB,EArCM,WAAO,IAAD,EACGnC,mBAAS,IADZ,mBAChB0B,EADgB,KACTU,EADS,OAECpC,mBAAS,IAFV,mBAEhBuB,EAFgB,KAEVc,EAFU,KAmBvB,OAEI,0BAAMC,SAjBV,SAAkBlB,GACdA,EAAEmB,iBAEF7C,IAASa,YAAYC,WAAW,SAC3BgC,IAAI,CACDd,QACAC,aAAcc,SAASlB,KAE1BO,MAAK,WACFM,EAAS,IACTC,EAAQ,SAQZ,8CACA,6BACI,wCACA,2BAAOK,WAAS,EAACC,KAAK,OAAOzB,MAAOQ,EAAOP,SAAU,SAACC,GAAD,OAAOgB,EAAShB,EAAEwB,OAAO1B,WAElF,6BACI,uCACA,2BAAOyB,KAAK,SAASzB,MAAOK,EAAMJ,SAAU,SAACC,GAAD,OAAOiB,EAAQjB,EAAEwB,OAAO1B,WAExE,oDChBG2B,MAVf,WACE,OACE,yBAAKpB,UAAU,OACb,sEACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCFcqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5B,MAAK,SAAA6B,GACJA,EAAaC,gBAEd3B,OAAM,SAAAC,GACLH,QAAQG,MAAMA,EAAM2B,c","file":"static/js/main.a942e64d.chunk.js","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/firestore';\n\n\n// Your web app's Firebase configuration\nvar firebaseConfig = {\n    apiKey: process.env.REACT_APP_API_KEY,\n    authDomain: \"just-clock-it-47733.firebaseapp.com\",\n    databaseURL: \"https://just-clock-it-47733.firebaseio.com\",\n    projectId: \"just-clock-it-47733\",\n    storageBucket: \"just-clock-it-47733.appspot.com\",\n    messagingSenderId: \"1075363172390\",\n    appId: \"1:1075363172390:web:0af28afa768b6979db16e7\",\n    measurementId: \"G-FHDB0L4EW8\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n//firebase.analytics();\n\nexport default firebase;","import React, { useState, useEffect } from 'react';\n\nimport firebase from '../firebase';\n\nconst SORT_OPTIONS = {\n    'TIME_ASC': { column: 'time_seconds', direction: 'asc' },\n    'TIME_DESC': { column: 'time_seconds', direction: 'desc' },\n\n    'TITLE_ASC': { column: 'title', direction: 'asc' },\n    'TITLE_DESC': { column: 'title', direction: 'desc' }\n\n}\n\n\n\nconst TimesList = () => {\n    const [times, setTimes] = useState([]);\n    const [sortBy, setSortBy] = useState('TIME_ASC');\n\n\n    useEffect(() => {\n        const unsubscribe =\n            firebase\n                .firestore()\n                .collection('times')\n                .orderBy(SORT_OPTIONS[sortBy].column, SORT_OPTIONS[sortBy].direction)\n                .onSnapshot((snapshot) => {\n                    const newTimes = snapshot.docs.map((doc) => (\n                        {\n                            id: doc.id,\n                            ...doc.data()\n                        }\n                    ));\n\n                    setTimes(newTimes)\n                })\n\n        return () => unsubscribe()\n    }, [sortBy]);\n\n\n\n    function handleDelete(id) {\n        firebase\n            .firestore().collection('times').doc(id).delete()\n            .then(() => console.log('record deleted!'))\n            .catch((error) => {\n                console.log('Error removing record: ', error)\n            })\n    }\n\n    return (\n\n        < div >\n            <h2>Times List</h2>\n            <div>\n                <label>Sort By</label> {''}\n                <select value={sortBy} onChange={e => setSortBy(e.currentTarget.value)}>\n                    <option value=\"TIME_ASC\">Time fastest first</option>\n                    <option value=\"TIME_DESC\">Time slowest first</option>\n                    <option disabled>--</option>\n                    <option value=\"TITLE_ASC\">Title a-z</option>\n                    <option value=\"TITLE_DESC\">Title z-a</option>\n                </select>\n            </div>\n            <ol>\n                {\n                    times.map((time) =>\n                        <li key={time.id}>\n                            <div className=\"time-entry\">\n                                {time.title}\n                                <code className=\"time\">{time.time_seconds} seconds</code>\n                                <button onClick={() => handleDelete(time.id)}>Delete</button>\n                            </div>\n                        </li>\n                    )\n                }\n\n\n\n            </ol>\n        </div >\n    );\n}\n\nexport default TimesList;","import React, { useState, useEffect } from 'react';\n\nimport firebase from 'firebase/app';\n\nconst AddTimeEntry = () => {\n    const [title, setTitle] = useState('');\n    const [time, setTime] = useState('');\n\n    function onSubmit(e) {\n        e.preventDefault();\n\n        firebase.firestore().collection('times')\n            .add({\n                title,\n                time_seconds: parseInt(time)\n            })\n            .then(() => {\n                setTitle('')\n                setTime('')\n            })\n\n    }\n\n    return (\n\n        <form onSubmit={onSubmit}>\n            <h4>Add Time Entry</h4>\n            <div>\n                <label>Title</label>\n                <input autoFocus type=\"text\" value={title} onChange={(e) => setTitle(e.target.value)} />\n            </div>\n            <div>\n                <label>Time</label>\n                <input type=\"number\" value={time} onChange={(e) => setTime(e.target.value)} />\n            </div>\n            <button>Add Time Entry</button>\n        </form>\n\n    );\n}\n\nexport default AddTimeEntry;","import React from 'react';\nimport firebase from './firebase';\nimport './App.css';\n\nimport TimesList from './components/TimesList';\nimport AddTimeEntry from './components/AddTimeEntry';\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>FireBase Firestore data testing â˜•</h1>\n      <TimesList />\n      <AddTimeEntry />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}